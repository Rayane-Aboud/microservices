version: '3.8'
services:
  

  data-transmission-service:
    build:
      context: ./data-transmission-service
    container_name: data-transmission-service
    ports:
      - "3003:3003"
    restart: on-failure
    depends_on:
      - influxdb
      - nats
    networks:
      - smart-metering-network

  data-aquisition-cloud-service:
    build:
      context: ./data-aquisition-cloud-service
    container_name: data-aquisition-cloud-service
    ports:
      - "3004:3004"
    restart: on-failure
    depends_on:
      - nats
    networks:
      - smart-metering-network
  
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    networks:
      - smart-metering-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    networks:
      - smart-metering-network
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: kafka1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1



  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    ports:
      - "1884:1884"
    restart: on-failure
    volumes:
      - ./_containers/mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - smart-metering-network

  influxdb:
    image: influxdb:2.1.1
    container_name: influxdb
    restart: on-failure
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_HOST=influxdb
      - DOCKER_INFLUXDB_INIT_USERNAME=user
      - DOCKER_INFLUXDB_INIT_PASSWORD=password1234
      - DOCKER_INFLUXDB_INIT_ORG=Namla
      - DOCKER_INFLUXDB_INIT_BUCKET=namla-smart-metering
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=4eYvsu8wZCJ6tKuE2sxvFHkvYFwSMVK0011hEEiojvejzpSaij86vYQomN_12au6eK-2MZ6Knr-Sax201y70w==
    networks:
      - smart-metering-network

  nats:
    image: nats:alpine
    hostname: nats
    container_name: nats
    ports:
      - "4222:4222"  # NATS default port for client connections
      - "8222:8222"  # NATS monitoring dashboard port (optional)
    restart: on-failure
    networks:
      - smart-metering-network



  data-transport-service:
    build:
      context: ./data-transport-service
    container_name: data-transport-service
    ports:
      - "3001:3001"
    restart: on-failure
    depends_on:
      - kafka1
      - mqtt
    networks:
      - smart-metering-network

  data-aquisition-service:
    build:
      context: ./data-aquisition-service
    container_name: data-aquisition-service
    ports:
      - "3010:3002"
    restart: on-failure
    depends_on:
      - kafka1
      - influxdb
    networks:
      - smart-metering-network

  mqtt-publisher:
    build:
      context: ./mqtt
    container_name: mqtt-publisher
    depends_on:
      - mqtt
    networks:
      - smart-metering-network
    
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.1
    command: mlflow server -h 0.0.0.0
    ports:
      - "5000:5000"
    


  inference-service:
    build: 
      context: ./inference-service
    container_name: inference-service
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      - influxdb
    networks:
      - smart-metering-network

  device-management-service:
    build: 
      context: ./device-management-service
    container_name: device-management-service
    ports:
      - "9669:9669"
    restart: on-failure
    depends_on:
      - mongo
    networks:
      - smart-metering-network


  front-end:
    build: 
      context: ./smart-metering-front-end-ts
    container_name: front-end
    ports:
      - "8080:8080"
    restart: on-failure
    networks:
      - smart-metering-network
      
  mongo:
    image: mongo
    container_name: mongo
    restart: on-failure
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - smart-metering-network

  grafana:
    image: grafana/grafana-oss:8.4.3
    container_name: grafana
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./configs/grafana.ini:/etc/grafana/grafana.ini  # Mount the custom grafana.ini file
    depends_on:
      - influxdb
    ports:
      - "3000:3000"
    networks:
      - smart-metering-network

  
volumes:
  influxdb_data:
  grafana_storage:

networks:
  smart-metering-network:
    driver: bridge



